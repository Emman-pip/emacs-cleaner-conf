#+NAME: GNU Emacs Config
#+Description: a configuration with better practices

* Options
** Includes font sizes, line numbering, and the like.
#+begin_src elisp
 (setq display-line-numbers-type 'relative)
 (global-display-line-numbers-mode)
 (set-face-attribute 'default nil :height 140)
#+end_src

* Package Manager
#+begin_src elisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(straight-use-package 'use-package)
#+end_src

* EVIL (MUAHAHAHA)
#+begin_src elisp
  (use-package undo-tree :straight t
    :config (global-undo-tree-mode))

  (use-package evil
    :straight t
    :init
    (setq evil-want-integration 1)
    (setq evil-want-C-u-scroll 1)
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-undo-system 'undo-tree)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :straight t
    :config
    (evil-collection-init))
#+end_src


* Theme
#+begin_src elisp
  (use-package doom-themes
    :straight t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-gruvbox t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
  (use-package nerd-icons
    :straight t
    :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    (nerd-icons-font-family "Hack Nerd Font")
    )
  ;; font here
  (set-frame-font "Hack Nerd Font 14" nil t)
#+end_src

** Powerline
#+begin_src elisp
  (use-package powerline :straight t
  :config
  (powerline-default-theme)
  )
#+end_src

* Completion
#+begin_src elisp
  (use-package counsel :straight t)
  (use-package ivy
    :straight t
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
    :config (ivy-mode)
    )
  (use-package helm
    :straight t
    :config
    (helm-mode 1))

  (use-package company
  :straight t
  :config (company-mode)
  )
#+end_src

* File navigation
#+begin_src elisp
  (use-package projectile :straight t
    :custom
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    :config
    (projectile-mode +1)
    )
#+end_src

** EVIL BINDINGS
#+begin_src elisp
  (evil-set-leader nil (kbd "SPC"))
  (evil-define-key 'normal 'global (kbd "<leader>ff") 'projectile-find-file)
  (evil-define-key 'normal 'global (kbd "<leader>fd") 'projectile-find-dir)
#+end_src
* Terminal
#+begin_src elisp
  (use-package vterm
      :straight t)
#+end_src

* check on the fly through flycheck!
#+begin_src elisp
  (use-package flycheck
  :straight t
  :config
  (global-flycheck-mode)
  )
#+end_src

* LSPs
** Python
#+begin_src elisp
  (use-package lsp-pyright
    :straight t
    :hook (python-mode . (lambda ()
			    (require 'lsp-pyright)
			    (lsp))))  ; or lsp-deferred
#+end_src

** Java
#+begin_src elisp
  (use-package lsp-java :straight t :config (add-hook 'java-mode-hook 'lsp))
#+end_src
