#+NAME: GNU Emacs Config
#+DESCRIPTION: a configuration with better practices

* Options
** Includes font sizes, line numbering, and the like.
#+begin_src elisp
  (setq display-line-numbers-type 'relative)
  (add-hook 'prog-mode 'display-line-numbers-mode)
  (set-face-attribute 'default nil :height 140)
  (electric-pair-mode)
#+end_src

* Package Manager
#+begin_src elisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(straight-use-package 'use-package)
#+end_src

* EVIL (MUAHAHAHA)
#+begin_src elisp
    (use-package undo-tree :straight t
      :config (global-undo-tree-mode))

    (use-package evil
      :straight t
      :init
      (setq evil-want-integration 1)
      (setq evil-want-C-u-scroll 1)
      (setq evil-want-Y-yank-to-eol t)
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
      (setq evil-undo-system 'undo-tree)
      (setq evil-want-keybinding nil)
      :hook
      ('prog-mode . 'evil-mode)
      ('prog-mode . 'display-line-numbers-mode)
  )

    (use-package evil-collection
      :after evil
      :straight t
      :config
      (evil-collection-init))
#+end_src


* Theme
#+begin_src elisp
  (use-package catppuccin-theme
  :straight t
  :init
  (load-theme 'catppuccin :no-confirm)
    (setq catppuccin-flavor 'frappe) ;; or 'latte, 'macchiato, or 'mocha
    (catppuccin-reload)
  )
  (use-package nerd-icons
    :straight t
    :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    (nerd-icons-font-family "Hack Nerd Font")
    )
  ;; font here
  ;; (set-frame-font "Hack Nerd Font 14" nil t)

#+end_src

** Org bullets
#+begin_src elisp
  (use-package org-bullets :straight t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
** Powerline
#+begin_src elisp
  (use-package powerline :straight t
  :config
  (powerline-default-theme)
  )
#+end_src

* Completion
#+begin_src elisp
      (use-package counsel :straight t)
      (use-package ivy
	:straight t
	:custom
	(setq ivy-use-virtual-buffers t)
	(setq enable-recursive-minibuffers t)
	;; enable this if you want `swiper' to use it
	;; (setq search-default-mode #'char-fold-to-regexp)
	(global-set-key "\C-s" 'swiper)
	(global-set-key (kbd "C-c C-r") 'ivy-resume)
	(global-set-key (kbd "<f6>") 'ivy-resume)
	(global-set-key (kbd "M-x") 'counsel-M-x)
	(global-set-key (kbd "C-x C-f") 'counsel-find-file)
	(global-set-key (kbd "<f1> f") 'counsel-describe-function)
	(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
	(global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
	(global-set-key (kbd "<f1> l") 'counsel-find-library)
	(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
	(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
	(global-set-key (kbd "C-c g") 'counsel-git)
	(global-set-key (kbd "C-c j") 'counsel-git-grep)
	(global-set-key (kbd "C-c k") 'counsel-ag)
	(global-set-key (kbd "C-x l") 'counsel-locate)
	(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
	(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
	:config (ivy-mode)
	)
      (use-package helm
	:straight t
	:config
	(helm-mode 1))

      ;; (use-package company
      ;;   :straight t
      ;;   :custom
      ;;   (setq company-idle-delay nil)
      ;;   (global-set-key (kbd "C-c y") 'company-yasnippet)
      ;;   :hook ('prog-mode . 'company-mode)
      ;;   )
    (use-package corfu
      :straight t
      ;; Optional customizations
      :custom
      (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
      (corfu-auto t)                 ;; Enable auto completion
      ;; (corfu-separator ?\s)          ;; Orderless field separator
      ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
      ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
      ;; (corfu-preview-current nil)    ;; Disable current candidate preview
      ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
      ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
      ;; (corfu-scroll-margin 5)        ;; Use scroll margin

      ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
      :hook ((prog-mode . corfu-mode))
      ;;        (shell-mode . corfu-mode)
      ;;        (eshell-mode . corfu-mode))

      ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
      ;; be used globally (M-/).  See also the customization variable
      ;; `global-corfu-modes' to exclude certain modes.
      ;; :init
      ;; (global-corfu-mode))
      )

    ;; A few more useful configurations...
    (use-package emacs
      :straight t
      :custom
      ;; TAB cycle if there are only few candidates
      ;; (completion-cycle-threshold 3)

      ;; Enable indentation+completion using the TAB key.
      ;; `completion-at-point' is often bound to M-TAB.
      (tab-always-indent 'complete)

      ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
      ;; try `cape-dict'.
      (text-mode-ispell-word-completion nil)

      ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
      ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
      ;; setting is useful beyond Corfu.
      (read-extended-command-predicate #'command-completion-default-include-p))
  ;; Use Dabbrev with Corfu!
  (use-package dabbrev
    :straight t
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
	   ("C-M-/" . dabbrev-expand))
    :config
    (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
    ;; Since 29.1, use `dabbrev-ignored-buffer-regexps' on older.
    (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))
#+end_src

* File navigation
#+begin_src elisp
  ;; (use-package projectile :straight t
  ;;   :custom
  ;;   (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  ;;   :config
  ;;   (projectile-mode +1)
  ;;   )
#+end_src

** EVIL BINDINGS
#+begin_src elisp
  (evil-set-leader nil (kbd "SPC"))
  ;; TODO replace these
  ;; (evil-define-key 'normal 'global (kbd "<leader>ff") 'projectile-find-file)
  ;; (evil-define-key 'normal 'global (kbd "<leader>fd") 'projectile-find-dir)
  (evil-define-key 'normal 'global (kbd "]d") 'next-error)
  (evil-define-key 'normal 'global (kbd "[d") 'previous-error)
  (evil-define-key 'normal 'global (kbd "<leader>n") 'evil-next-buffer)
  (evil-define-key 'normal 'global (kbd "<leader>b") 'evil-prev-buffer)
  (evil-define-key 'normal 'global (kbd "<leader>m") 'dired)
  (evil-define-key 'normal 'global (kbd "<leader>d") 'kill-buffer)
  (evil-define-key 'normal 'global (kbd "<leader>td") 'lsp-ui-doc-toggle)
#+end_src
* Terminal
#+begin_src elisp
  (use-package vterm
      :straight t)
#+end_src

* flycheck/lsp-ui!!!
#+begin_src elisp
  (use-package flycheck
    :straight t
    :config (global-flycheck-mode)
    )

  (global-flycheck-mode)
  (use-package lsp-ui
    :straight t
    :custom
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
    :config (add-hook 'prog-mode 'lsp-ui-toggle-symbols-info)
    )
#+end_src

* PDF READER
#+begin_src elisp
  (use-package pdf-tools :straight t)
#+end_src

* Snippets
#+begin_src elisp
      (use-package yasnippet
      :straight t
    :hook ('prog-mode . 'yas-minor-mode))
#+end_src
* LSPs
** Python
#+begin_src elisp
  (use-package lsp-pyright
    :straight t
    :custom
    (setq lsp-pyright-venv-path t)
    (setq lsp-pyright-auto-search-paths t)
    :hook (python-mode . (lambda ()
			   (require 'lsp-pyright)
			   (lsp))))  ; or lsp-deferred
#+end_src

** Java
#+begin_src elisp
  (use-package lsp-java :straight t :config (add-hook 'java-mode-hook 'lsp))
#+end_src

